\import lect05
\open Nat

-- 1. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim k
    | 0 => idp
    | suc k => pmap (\lam s => s + n) (ldistr n m k) *> +-assoc (n * m) (n * k) n

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
    | 0 => idp
    | suc n => (
        (m + k) * suc n
        ==< idp >==
        (m + k) * n + (m + k)
        ==< pmap (\lam s => s + (m + k)) (rdistr n m k) >==
        (m * n + k * n) + (m + k)
        ==< (+-assoc (m * n) (k * n) (m + k)) >==
        (m * n) + ((k * n) + (m + k))
        ==< pmap (\lam s => (m * n) + s) (sym (+-assoc (k * n) m k)) >==
        (m * n) + ((k * n + m) + k)
        ==< pmap (\lam s => (m * n) + (s + k)) (+-comm (k * n) m) >==
        (m * n) + (m + (k * n) + k)
        ==< pmap (\lam s => (m * n) + s) (+-assoc m (k * n) k) >==
        (m * n) + (m + ((k * n) + k))
        ==< sym (+-assoc (m * n) m (k * n + k)) >==
        (m * n) + m + ((k * n) + k)
        ==< idp >==
        m * (suc n) + k * (suc n) `qed
    )
-- 2. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\data List (A : \Type) | nil | cons A (List A)

\func \infixl 4 ++ {A : \Type} (xs ys : List A) : List A \elim xs
  | nil => ys
  | cons x xs => cons x (xs ++ ys)

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | cons x xs => reverse xs ++ cons x nil

-- Это утверждение будет полезно для доказательства.
\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs => {?}

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs => {?}

-- 3. Докажите, что vnil является нейтральным элементом для v++.

\func vnil-rightId {A : \Type} {n : Nat} (xs : Vec A n) : transport (Vec A) (+-comm 0 n) (xs v++ vnil) = xs => {?}

-- 4. Докажите, что 0 не равно suc x.

\func zero/=suc (x : Nat) (p : 0 = suc x) : Empty => {?}

-- 5. Докажите, что fac не равен suc.

\func fac (n : Nat) : Nat
  | 0 => 1
  | suc n => suc n * fac n

\func fac/=suc (p : fac = suc) : Empty => {?}

-- 6. У оператора J есть другая форма, которую мы будем называть Jalt. Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот.

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается.

\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
    (b : \Pi (a : A) -> B a a idp)
    {a a' : A} (p : a = a') : B a a' p => {?}

-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается.

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
    (b : B a idp)
    {a' : A} (p : a = a') : B a' p => {?}
