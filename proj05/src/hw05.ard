\import lect05
\open Nat

-- 1. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim k
    | 0 => idp
    | suc k => pmap (\lam s => s + n) (ldistr n m k) *> +-assoc (n * m) (n * k) n

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
    | 0 => idp
    | suc n => (
        (m + k) * suc n
        ==< idp >==
        (m + k) * n + (m + k)
        ==< pmap (\lam s => s + (m + k)) (rdistr n m k) >==
        (m * n + k * n) + (m + k)
        ==< (+-assoc (m * n) (k * n) (m + k)) >==
        (m * n) + ((k * n) + (m + k))
        ==< pmap (\lam s => (m * n) + s) (sym (+-assoc (k * n) m k)) >==
        (m * n) + ((k * n + m) + k)
        ==< pmap (\lam s => (m * n) + (s + k)) (+-comm (k * n) m) >==
        (m * n) + (m + (k * n) + k)
        ==< pmap (\lam s => (m * n) + s) (+-assoc m (k * n) k) >==
        (m * n) + (m + ((k * n) + k))
        ==< sym (+-assoc (m * n) m (k * n + k)) >==
        (m * n) + m + ((k * n) + k)
        ==< idp >==
        m * (suc n) + k * (suc n) `qed
    )
-- 2. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\data List (A : \Type) | nil | cons A (List A)

\func \infixl 4 ++ {A : \Type} (xs ys : List A) : List A \elim xs
  | nil => ys
  | cons x xs => cons x (xs ++ ys)

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | cons x xs => reverse xs ++ cons x nil

\func nil-rightId {A : \Type} (xs : List A) : xs = xs ++ nil \elim xs
    | nil => idp
    | cons x xs => pmap (cons x) (nil-rightId xs)

\func ++assoc{A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
    | nil => idp
    | cons x xs => pmap (cons x) (++assoc xs ys zs)

-- Это утверждение будет полезно для доказательства.
\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs, ys
    | nil, nil => idp
    | cons x xs, nil => pmap (\lam l => l ++ cons x nil) (reverse++ xs nil)
    | nil, cons y ys => nil-rightId (reverse ys ++ cons y nil)
    | cons x xs, ys => pmap (\lam l => l ++ cons x nil) (reverse++ xs ys) *> ++assoc (reverse ys) (reverse xs) (cons x nil)

--    reverse  (xs ++ cons  y ys) ++ cons  x (nil ) =  reverse  ys ++  cons  y (nil) ++  (reverse  xs ++  cons  x (nil ))

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs \elim xs
    | nil => idp
    | cons x xs => reverse++ (reverse xs) (cons x nil) *> pmap (cons x) (reverse-isInvolutive xs)
-- 3. Докажите, что vnil является нейтральным элементом для v++.

-- я не знаю, почему это работает :(
\func vnil-rightId {A : \Type} {n : Nat} (xs : Vec A n) : transport (Vec A) (+-comm 0 n) (xs v++ vnil) = xs \elim n, xs
    | 0, vnil => idp
    | suc n, vcons x xs
        => J (\lam e (p : 0 + n = e) =>
            (transport (Vec A) (pmap suc p) (vcons x (xs v++ vnil))) =
            vcons x (transport (Vec A) p (xs v++ vnil)))
            idp
            (+-comm 0 n)

            *> pmap (vcons x) (vnil-rightId xs)

-- 4. Докажите, что 0 не равно suc x.

\data TT (n : Nat) \with
    | suc n => tt

\func absurd (t : TT 0) : Empty
\func zero/=suc (x : Nat) (p : 0 = suc x) : Empty => absurd (transport TT (sym p) (tt))

-- 5. Докажите, что fac не равен suc.

\func fac (n : Nat) : Nat
  | 0 => 1
  | suc n => suc n * fac n

\func dec (p : Nat) : Nat
    | suc p => p
    | 0 => 0

\func dec-eq {n m : Nat} (p : suc n = suc m) : n = m => pmap dec p

\func fac/=suc (p : fac = suc) : Empty => zero/=suc 0 (dec-eq (pmap (\lam f => f 1) p))

-- 6. У оператора J есть другая форма, которую мы будем называть Jalt. Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот.

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается.

\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
    (b : \Pi (a : A) -> B a a idp)
    {a a' : A} (p : a = a') : B a a' p => J (B a) (b a) p

-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается.
-- Hint:
-- 1. Выразите transport через Jalt.
-- 2. Докажите, что тип \Sigma (x : A) (a = x) одноэлементный, то есть, что для любого p : \Sigma (x : A) (a = x) верно, что (x,idp) = p.
-- 3. Используя эти две конструкции, легко определить J.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => {?}

\func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a,idp) = {\Sigma (x : A) (a = x)} p => {?}

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
    (b : B a idp)
    {a' : A} (p : a = a') : B a' p => {?}
