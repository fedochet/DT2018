\import lect07
\open Nat

-- 1. Реализуйте любой алгоритм сортировки, используя with для паттерн матчинга на результате сравнения элементов списка.
\func insert {A : \Type} (comp : A -> A -> Bool) (e : A) (xs : List A) : List A \elim xs
  | nil => cons e nil
  | cons x xs => \case comp x e \with {
    | true => cons e (cons x xs)
    | false => cons x (insert comp e xs)
  }

\func sort {A : \Type} (comp : A -> A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => insert comp x (sort comp xs)

-- 2. Определите filter через if, а не через with.
--    Докажите для этой версии filter лемму filter-lem.

\func if {A : \Type} (b : Bool) (t e : A) : A \elim b
  | true => t
  | false => e

\func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => if (p x) (cons x (filter' p xs)) (filter' p xs)

\func filter-lem {A : \Type} (p : A -> Bool) (xs : List A) : length (filter' p xs) <= length xs \elim xs
  | nil => unit
  | cons x xs => \case p x \as b \return length (if (b) (cons x (filter' p xs)) (filter' p xs)) <= suc (length xs) \with {
    | true => filter-lem p xs
    | false => <=-helper (filter-lem p xs)
  }


-- 3. Докажите, что если равенство элементов A разрешимо, то и равенство элементов List A тоже разрешимо.

\instance ListEq {A : \Type} (dec : Eq A) : Eq (List A)
  | decideEq => decideEq dec
  \where \func decideEq {A : \Type} (dec : Eq A) (x y : List A) : Decide (x = y) \elim x, y
    | nil, nil => yes idp
    | nil, cons _ _ => no (\lam p => transport (\lam xs => \case xs \with { | nil => Empty | cons _ _ => Unit }) (sym p) unit)
    | cons _ _, nil => no (\lam p => transport (\lam xs => \case xs \with { | nil => Empty | cons _ _ => Unit }) p unit)
    | cons x xs, cons y ys => \case dec.decideEq x y \with {
      | yes eqHead => \case decideEq dec xs ys \with {
        | yes eqTail => yes (pmap2 (cons) eqHead eqTail)
        | no notEq => no (\lam eq => notEq (pmap removeHead eq))
      }
      | no notEq => no (\lam eq => notEq (pmap (removeTail x) eq))
    }

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  path (\lam i => f (p @ i) (q @ i))

\func removeTail {A : \Type} (a : A) (xs : List A) : A \elim xs
  | nil => a
  | cons x xs => x

\func removeHead {A : \Type} (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => xs

-- 4. Докажите, что предикат isEven разрешим.

\func sym {A : \Type} {a a' : A} (p : a = a') : a' = a
  => transport (\lam x => x = a) p idp

-- Транзитивность
\func trans {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
  => transport (\lam x => a = x) q p

\func isEven (n : Nat) => \Sigma (k : Nat) (n = 2 * k)

\func isEven-dec : DecPred isEven => \lam n
  => \case n \as x, parity n : Parity x \return Decide (isEven x) \with {
  | n, even n' p => yes (n', p)
  | n, odd n' p => no (\lam eq => odd/=even n' eq.1 (trans (sym eq.2) p))
}

\func odd/=even (n m : Nat) (p : 2 * m  = 2 * n + 1) : Empty \elim n, m
  | suc n', 0 => suc/=0 (sym p)
  | suc n', suc m' => odd/=even n' m' (pmap pred (pmap pred p))
  | 0, suc m' => suc/=0 (pmap pred p)
  | 0, 0 => suc/=0 (sym p)

\func pred (n : Nat): Nat
  | 0 => 0
  | suc n => n


-- 5. Докажите, что если равенство элементов A разрешимо, то любой список элементов A либо пуст, либо состоит из повторений одного элемента, либо в A существует два различных элемента.

\func repeat {A : \Type} (n : Nat) (a : A) : List A \elim n
  | 0 => nil
  | suc n => cons a (repeat n a)

\data Result (A : \Type) (xs : List A)
  | empty (xs = nil)
  | repeated (n : Nat) (a : A) (p : xs = repeat n a)
  | A-is-not-trivial (a a' : A) (p : a = a' -> Empty)

\func lemma {A : \Type} (xs : List A) {dec : DecEq A} : Result A xs \elim xs
  | nil => empty idp
  | cons x xs => \case lemma xs {dec} \with {
    | empty p => repeated 1 x (pmap (cons x) p)
    | repeated n a p => \case dec x a \with {
      | yes eq => repeated (suc n) a (pmap2 (cons) eq p)
      | no neq => A-is-not-trivial x a neq
    }
    | A-is-not-trivial a a' p => A-is-not-trivial a a' p
  }

-- 6. Определите view, представляющий число в виде частного и остатка
-- от деления его на произвольное (неотрицательное) число m.
--    Реализуйте функцию деления.

\data ModView (m n : Nat)
  | quot-rem (q r : Nat) (t : T (r < m)) (p : n = q * m + r)

\func mod-view (m n : Nat) (t : T (0 < m)) : ModView m n => {?}

\func div (n m : Nat) (t : T (0 < m)) : Nat => {?}

-- 7. Докажите, что функции FromBoolToDec и FromDecToBool взаимно обратны.

\func bdb {A : \Type} (p : A -> Bool) : FromDecToBool (FromBoolToDec p) = p => {?}

-- Мы не можем доказать, что FromBoolToDec (FromDecToBool P) = P, но мы можем доказать более слабое утверждение: эти предикаты логически эквивалентны.
-- Для этого введем эквивалентность предикатов.

\func \infix 4 <-> {A : \Type} (P Q : A -> \Type) => \Pi (x : A) -> \Sigma (P x -> Q x) (Q x -> P x)

\func dbd {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P)) : (FromBoolToDec (FromDecToBool P)).1 <-> P.1 => {?}
