\open Nat

-- 1. filter через \case и через helper.

\data List (A : \Type) | nil | cons A (List A)

\func filter {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => \case p x \with {
    | true => cons x (filter p xs)
    | false => filter p xs
  }

\func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => helper (p x) x (filter p xs)
  \where
    \func helper {A : \Type} (b : Bool) (x : A) (r : List A) : List A \elim b
      | true => cons x r
      | false => r

-- 2. \case в языках с зависимыми типами.

\data Bool | true | false

\func not (b : Bool) : Bool
  | true => false
  | false => true

-- foo через \case
\func foo {A : \Type} (p : A -> Bool) (a : A) : p a = not (not (p a)) =>
  \case p a \as b \return b = not (not b) \with {
    | true => idp -- true = not (not true)
    | false => idp -- false = not (not false)
  }

-- foo через helper
\func foo' {A : \Type} (p : A -> Bool) (a : A) : p a = not (not (p a)) =>
  helper (p a)
  \where
    \func helper (b : Bool) : b = not (not b) \elim b
      | true => idp
      | false => idp

-- 2. \case по нескольким аргументам.

\func \infix 4 < (x y : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc x, suc y => x < y

\data Ordering | LT | EQ | GT

\func compare (x y : Nat) : Ordering =>
  \case x < y, y < x \with {
    | true, true => EQ
    | true, false => LT
    | false, true => GT
    | false, false => EQ
  }

-- 3. Пример доказательств через \case.

\data Empty

\func absurd {A : \Type} (e : Empty) : A

\data Unit | unit

\func \infix 4 <= (x y : Nat) : \Type
  | 0, _ => Unit
  | suc _, 0 => Empty
  | suc x, suc y => x <= y

\func length {A : \Type} (xs : List A) : Nat
  | nil => 0
  | cons _ xs => suc (length xs)

\func <=-helper {x y : Nat} (p : x <= y) : x <= suc y \elim x, y
  | 0, _ => unit
  | suc x, 0 => absurd p
  | suc x, suc y => <=-helper p

\func filter-lem {A : \Type} (p : A -> Bool) (xs : List A)
  : length (filter p xs) <= length xs \elim xs
  | nil => unit
  | cons x xs => \case p x \as b \return length (\case b \with { | true => cons x (filter p xs) | false => filter p xs }) <= suc (length xs) \with {
    | true => filter-lem p xs
    | false => <=-helper (filter-lem p xs)
  }

-- 4. \case на idp.

\func idp {A : \Type} {a : A} => path (\lam _ => a)

\func baz {A : \Type} (B : Bool -> \Type) (p : A -> Bool) (a : A)
    (pt : B true) (pf : B false) : B (p a) =>
    \case p a \as b, idp : b = p a \with {
      | true, q => transport B q pt -- q : true = p a
      | false, q => transport B q pf -- q : false = p a
    }

-- 5. Еще один пример.

-- Через \case и helper
\func bar {A : \Type} (p q : A -> Bool) (a : A) (s : q a = not (p a))
  : not (q a) = p a =>
  \case p a \as x, q a \as y, s : y = not x \return not y = x \with {
    | true, true, s' => sym s'
    | true, false, _ => idp
    | false, true, _ => idp
    | false, false, s' => sym s'
  }

\func bar' {A : \Type} (p q : A -> Bool) (a : A) (s : q a = not (p a))
  : not (q a) = p a => helper (p a) (q a) s
  \where
    \func helper (x y : Bool) (s : y = not x) : not y = x \elim x, y
      | true, true => sym s
      | true, false => idp
      | false, true => idp
      | false, false => sym s

-- 6. Views.

\data Parity (n : Nat)
  | even (k : Nat) (p : n = 2 * k)
  | odd (k : Nat) (p : n = 2 * k + 1)

\func parity (n : Nat) : Parity n
  | 0 => even 0 idp
  | suc n => \case parity n \with {
    | even k p => odd k (pmap suc p)
    | odd k p => even (suc k) (pmap suc p)
  }

\func div2 (n : Nat) : Nat => \case parity n \with {
  | even k _ => k
  | odd k _ => k
  }

-- 7. Разрешимые предикаты.

-- Пример неразрешимого предиката
-- P : Nat -> \Type
-- P n = "останавливается ли машина Тьюринга с номером n на входе n"

\data Decide (A : \Type)
  | yes A
  | no (A -> Empty)

\func DecPred {A : \Type} (P : A -> \Type) => \Pi (a : A) -> Decide (P a)

\func decide0 : DecPred (\lam (n : Nat) => n = 0) => \lam n =>
  \case n \as x \return Decide (x = 0) \with {
    | 0 => yes idp
    | suc _ => no suc/=0
  }

-- 8. Разрешимое равенство.

\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') => path (\lam i => f (p @ i))

\func transport {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) => coe (\lam i => B (p @ i)) b right

\func suc/=0 {n : Nat} (p : suc n = 0) : Empty => transport (\lam n => \case n \with { | 0 => Empty | suc _ => Unit }) p unit

\func sym {A : \Type} {a a' : A} (p : a = a') => transport (\lam x => x = a) p idp

\func DecEq (A : \Type) => \Pi (a a' : A) -> Decide (a = a')

\class Eq (A : \Type) {
  | decideEq : DecEq A
  \func \infix 4 == (a a' : A) : Bool => \case decideEq a a' \with {
    | yes _ => true
    | no _ => false
  }
} \where {
  \func \infix 4 ==' {e : Eq} (a a' : e.A) : Bool => \case e.decideEq a a' \with {
    | yes _ => true
    | no _ => false
  }
}

\open Eq(==)

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\instance NatEq : Eq Nat
  | decideEq => decideEq
  \where
    \func decideEq (x y : Nat) : Decide (x = y)
      | 0, 0 => yes idp
      | 0, suc y => no (\lam p => suc/=0 (sym p))
      | suc x, 0 => no suc/=0
      | suc x, suc y => \case decideEq x y \with {
        | yes p => yes (pmap suc p)
        | no c => no (\lam p => c (pmap pred p))
      }

\func test1 : (0 == 0) = true => idp
\func test2 : (0 == 1) = false => idp

-- 9. Предикаты A -> Bool

\data T (b : Bool) \with
  | true => tt

\func T-absurd {A : \Type} (t : T false) : A

\func FromBoolToDec {A : \Type} (p : A -> Bool) : \Sigma (P : A -> \Type) (DecPred P)
  => (\lam a => T (p a), \lam a => \case p a \as b \return Decide (T b) \with {
    | true => yes tt
    | false => no T-absurd
  })

\func FromDecToBool {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P)) : A -> Bool
  => \lam a => \case P.2 a \with {
    | yes _ => true
    | no _ => false
  }